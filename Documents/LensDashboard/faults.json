{
  "id": "31788031fe314c9caee5a893cdc6e5c9",
  "name": "Faults",
  "workspace": "9f42ae2a-5f93-4238-9c42-24f6d050b342",
  "provider": "Dso",
  "scenario": "",
  "description": "",
  "tags": "",
  "config": {
    "jobName": "31788031fe314c9caee5a893cdc6e5c9",
    "jobDisplayName": "Faults",
    "jobDescription": "",
    "tags": "",
    "maxJobInstances": 1,
    "isDebug": false,
    "appendUtcIndicator": false,
    "allocationType": 0,
    "jobScheduleSettings": {
      "scheduleType": "Frequency",
      "frequencySettings": {
        "cronSchedule": "0 49 18 */1 * *",
        "backFill": false,
        "monthly": false
      }
    },
    "defaultICMAlerts": false,
    "activities": [
      {
        "activityDisplayName": "FAULTSWAT - Health Timeline",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "76a87f32-2a4a-4110-8e70-a730a4028951",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet searchTerm = \"AzureStack Cloud Validation Result:\";\r\nlet searchFileNameRegex = @\"AzureStack_Validation_Trace_([_\\d\\.]*)(.log|.LOG)\";\r\nlet timeExtractionRegex = @\"(\\d{4}).(\\d{2}).(\\d{2})_(\\d{2}).(\\d{2}).(\\d{2})\";\r\nlet replaceString = @\"\\1-\\2-\\3 \\4:\\5:\\6\";\r\nlet ExtractTimeFromFileName = (fileName:string){todatetime(replace(timeExtractionRegex,replaceString,extract(searchFileNameRegex,1,fileName)))};\r\nlet view = datatable(OccurrenceTime:datetime,Source:string,Healthy:long) [];\r\nlet startTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize min(OccurrenceTime));\r\nlet endTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize max(OccurrenceTime));\r\nlet binval = 1h;\r\nlet zeroTimeTable =  (range Healthy from tolong(0) to tolong(0) step 1\r\n    | mvexpand OccurrenceTime = range(startTime-binval, endTime+binval, binval) to typeof(datetime) limit 65536\r\n    | extend OccurrenceTime = bin(OccurrenceTime, binval),Source=\"Timeline\");\r\nunion isfuzzy=true view,zeroTimeTable,(\r\n    database('db').['TextFileLogs']\r\n    | where FileName matches regex searchFileNameRegex\r\n    | where FileLineContent contains searchTerm\r\n    | distinct FileName,LineNumber,FileLineContent\r\n    | extend SummaryInfo=extract(@\"(\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d) AzureStack Cloud Validation Result: (\\w*)\",2,FileLineContent)\r\n    | extend OccurrenceTime=ExtractTimeFromFileName(FileName)\r\n    | extend Healthy=tostring(SummaryInfo)==\"PASS\",Source=\"Test-AzureStack\"\r\n    | project OccurrenceTime,tolong(Healthy),Source\r\n)\r\n| project Healthy,OccurrenceTime,Source\r\n| sort by OccurrenceTime asc\r\n| project Healthy,OccurrenceTime,Source | sort by OccurrenceTime asc"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - Health Timeline"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - Health Detail",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "ffdd347e-442a-4027-a398-fcd48cf21abb",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet view = datatable(OccurrenceTime:datetime,SummaryInfo:string,SummaryFile:string,LogFile:string)[];\r\nlet searchFileNameRegex = @\"AzureStack_Validation_(Summary|Trace)_([_\\d\\.]*)(.HTML|.html|.log|.LOG)\";\r\nlet timeExtractionRegex = @\"(\\d{4}).(\\d{2}).(\\d{2})_(\\d{2}).(\\d{2}).(\\d{2})\";\r\nlet searchTerm = \"AzureStack Cloud Validation Result:\";\r\nlet replaceString = @\"\\1-\\2-\\3 \\4:\\5:\\6\";\r\nlet ExtractTimeFromFileName = (fileName:string){todatetime(replace(timeExtractionRegex,replaceString,extract(searchFileNameRegex,2,fileName)))};\r\nunion isfuzzy=true view,(\r\n    database('db').TextFileLogs\r\n    | where FileName matches regex searchFileNameRegex\r\n    | extend SummaryInfo=extract(@\"(\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d) AzureStack Cloud Validation Result: (\\w*)\",2,FileLineContent)\r\n    | extend HostCluster=extract(@\"([A-Z.]*) Azure Stack Cloud Hosting Infrastructure Summary\",1,FileLineContent)\r\n    | extend InfraVMs=extract(@\"([A-Z.]*) Azure Stack Infrastructure Role Instance Summary\",1,FileLineContent)\r\n    | extend InfraCapacity=extract(@\"([A-Z.]*) Azure Stack Infrastructure Capacity\",1,FileLineContent)\r\n    | extend InfraSFClusters=extract(@\"([A-Z.]*) Infrastructure management controller, Network controller, Storage services, and Privileged endpoint Infrastructure Roles\",1,FileLineContent)\r\n    | extend InfraSFApps=extract(@\"([A-Z.]*) Azure Stack Infrastructure Role summary\",1,FileLineContent)\r\n    | extend InfraSFServices=extract(@\"([A-Z.]*) Azure Stack Cloud Service Fabric Services\",1,FileLineContent)\r\n    | extend SQL=extract(@\"([A-Z.]*) Azure Stack Control Plane SQl Connection Summary\",1,FileLineContent)\r\n    | extend Endpoints=extract(@\"([A-Z.]*) Azure Stack Portal and API Summary\",1,FileLineContent)\r\n    | extend PhysicalDisks=extract(@\"([A-Z.]*) Azure Stack Storage Services Physical Disks Summary\",1,FileLineContent)\r\n    | distinct FileName,SummaryInfo,HostCluster,InfraVMs,InfraCapacity,InfraSFClusters,InfraSFApps,InfraSFServices,SQL,Endpoints,PhysicalDisks\r\n    | extend AzsLogCollectionFolder=extract(@\"(AzureStackLogs-\\d*)\",1,FileName)\r\n    | extend OccurrenceTime = ExtractTimeFromFileName(FileName)\r\n    | extend LogFileName=iff(FileName endswith \".log\",FileName,\"\"),SummaryFileName=iff(FileName endswith \".html\",FileName,\"\")\r\n    | summarize SummaryInfo=any(SummaryInfo),SummaryFile=any(SummaryFileName),LogFile=any(LogFileName),HostCluster=any(HostCluster),InfraVMs=any(InfraVMs),InfraCapacity=any(InfraCapacity),InfraSFClusters=any(InfraSFClusters),InfraSFApps=any(InfraSFApps),InfraSFServices=any(InfraSFServices),SQL=any(SQL),Endpoints=any(Endpoints),PhysicalDisks=any(PhysicalDisks) by OccurrenceTime,AzsLogCollectionFolder\r\n    | extend SummaryInfo=iff(SummaryInfo!~\"pass\", strcat(\"<strong style='background-color:yellow;color:red'>\",SummaryInfo,\"</strong>\"),strcat(\"<strong style='color:green;'>\",SummaryInfo,\"</strong>\"))\r\n    | order by OccurrenceTime desc\r\n)\r\n| extend Cluster='{cluster}', Database='{database}'\r\n"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - Health Detail"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - ARM Success Rate",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "68b45ca4-41ed-4eca-9afc-82ca24119718",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet schema=datatable(ServerFailRate:real,ClientFailRate:real,PassRate:real,Total:long)[];\r\nlet opRegex = \"([^/]+)/?.*/PROVIDERS/([^/]+)/(.*[^/])/?\";\r\nlet extractOperation = (s:string) { extract(opRegex, 1 , s) };\r\nlet extractResourceProvider = (s:string) { extract(opRegex, 2 , s) };\r\nlet extractResourceType = (s:string) { extract(opRegex, 3 , s) };\r\nlet filterOperation = (s:string) { s contains \"PROVIDERS\" };\r\nlet isSuccess = (i:int) { i/100 == 2 };\r\nlet isServerFailure = (i:int) { i/100 == 5 };\r\nlet isClientFailure = (i:int) { i/100 == 4 };\r\nunion isfuzzy=true schema,(\r\n    union database(\"db\").[\"ETL-Microsoft-AzureStack-Frontdoor.HttpIncomingRequestEndWith*\"]\r\n    | where filterOperation(OperationName) and HttpStatusCode != 404\r\n    | project HttpStatusCode\r\n    | summarize Total = count(),\r\n        ServerFail = countif(isServerFailure(HttpStatusCode)),\r\n        ClientFail = countif(isClientFailure(HttpStatusCode)),\r\n        Pass = countif(isSuccess(HttpStatusCode))\r\n    | project ARMOpsReliability=toreal(Pass)/toreal(Total),ServerFailRate=toreal(ServerFail)/toreal(Total),ClientFailRate=toreal(ClientFail)/toreal(Total),Total \r\n)\r\n| project Total,ARMOpsReliability,ClientFailRate,ServerFailRate"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - ARM Success Rate"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - ARM Failure Timeline",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "956b9f65-c001-4637-a0e4-b9c6ced2fd2d",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet view=datatable(OccurrenceTime:datetime,Pass:long,ClientFail:long,ServerFail:long,ResourceProvider:string,Operation:string,ResourceType:string)[];\r\nlet startTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize min(OccurrenceTime));\r\nlet endTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize max(OccurrenceTime));\r\nlet binval = 1h;\r\nlet zeroTimeTable =  (range Succeeded from 0 to 0 step 1\r\n    | mvexpand OccurrenceTime = range(startTime-binval, endTime+binval, binval) to typeof(datetime) limit 65536\r\n    | extend OccurrenceTime = bin(OccurrenceTime, binval));\r\nlet opRegex = \"([^/]+)/?.*/PROVIDERS/([^/]+)/(.*[^/])/?\";\r\nlet extractOperation = (s:string) { extract(opRegex, 1 , s) };\r\nlet extractResourceProvider = (s:string) { extract(opRegex, 2 , s) };\r\nlet extractResourceType = (s:string) { extract(opRegex, 3 , s) };\r\nlet filterOperation = (s:string) { s contains \"PROVIDERS\" };\r\nlet isSuccess = (i:int) { i/100 == 2 };\r\nlet isServerFailure = (i:int) { i/100 == 5 };\r\nlet isClientFailure = (i:int) { i/100 == 4 };\r\nunion isfuzzy=true view,zeroTimeTable,(\r\n    union database(\"db\").[\"ETL-Microsoft-AzureStack-Frontdoor.HttpIncomingRequestEndWith*\"]\r\n    | where filterOperation(OperationName)\r\n    | project HttpStatusCode, DurationInMilliseconds, OperationName,OccurrenceTime\r\n    | summarize count() by OperationName,HttpStatusCode,bin(OccurrenceTime,binval)\r\n    | summarize Total = sum(count_),\r\n        ServerFail = sumif(count_,isServerFailure(HttpStatusCode)),\r\n        ClientFail = sumif(count_,isClientFailure(HttpStatusCode)),\r\n        Pass = sumif(count_,isSuccess(HttpStatusCode)),\r\n        StatusCodeCounts = makelist(pack(\"StatusCode\",HttpStatusCode,\"Count\",count_))\r\n        by OperationName,bin(OccurrenceTime,binval)\r\n    | project \r\n        ResourceProvider = extractResourceProvider(OperationName),\r\n        Operation = extractOperation(OperationName), \r\n        ResourceType = extractResourceType(OperationName),\r\n        ServerFail,ClientFail,Pass,OccurrenceTime\r\n)\r\n| summarize sum(ClientFail), sum(ServerFail) by bin(OccurrenceTime, time(1h)) | sort by OccurrenceTime asc"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - ARM Failure Timeline"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - ARM Operations with failure count",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "49197d88-e9ef-4c46-a474-28082c773dd1",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet schema=datatable(OperationName:string,ServerFail:long,ClientFail:long,Total:long,StatusCodeCounts:dynamic)[];\r\nlet filterOperation = (s:string) { s contains \"PROVIDERS\" };\r\nlet isSuccess = (i:int) { i/100 == 2 };\r\nlet isServerFailure = (i:int) { i/100 == 5 };\r\nlet isClientFailure = (i:int) { i/100 == 4 };\r\nunion isfuzzy=true schema,(\r\n    union database(\"db\").[\"ETL-Microsoft-AzureStack-Frontdoor.HttpIncomingRequestEndWith*\"]\r\n    | where filterOperation(OperationName) and HttpStatusCode != 404\r\n    | project HttpStatusCode, DurationInMilliseconds, OperationName, ApiVersion\r\n    | summarize count() by OperationName,HttpStatusCode\r\n    | summarize Total = sum(count_),\r\n        ServerFail = sumif(count_,isServerFailure(HttpStatusCode)),\r\n        ClientFail = sumif(count_,isClientFailure(HttpStatusCode)),\r\n        Pass = sumif(count_,isSuccess(HttpStatusCode)),\r\n        StatusCodeCounts = makelist(pack(\"StatusCode\",HttpStatusCode,\"Count\",count_))\r\n        by OperationName\r\n    | project OperationName,ServerFail,ClientFail,Total,StatusCodeCounts  \r\n    | where ServerFail > 0 or ClientFail > 0\r\n    | sort by ServerFail desc\r\n)\r\n"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - ARM Operations with failure count"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - VM Creation Success Rate",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "fd3ad4b6-b124-42e6-844c-35e6f03a42ca",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet schema = datatable(Succeeded:int,Failed:int,DurationInMin:int)[];\r\nunion isfuzzy=true schema,(\r\n    database('db').['ETL-CrpServiceEventSource.ApiQosEvent']\r\n    | where OperationName startswith \"VirtualMachines.\" and not(OperationName endswith \"GET\")\r\n    | distinct OccurrenceTime,OperationName,ResultType,CorrelationId,E2EDurationInMilliseconds,ResourceName,ErrorDetails\r\n    | extend extracted=extractall(@\"(?:VirtualMachines\\.)(\\w*)(?:\\.)(DELETE|PUT|POST)\", OperationName)\r\n    | extend Method=tostring(extracted[0][1]), OpType=tostring(extracted[0][0])\r\n    | project-away extracted\r\n    | join kind=leftouter (\r\n        database('db').['ETL-Microsoft-AzureStack-Compute-Pipeline.VmPipelineRunStop']\r\n        | distinct OccurrenceTime,VmName,CorrelationId,DurationInMs,Exception\r\n        | summarize DurationInMs=sum(DurationInMs),Exception=any(Exception) by VmName,CorrelationId)\r\n    on CorrelationId,$left.ResourceName == $right.VmName\r\n    | where Method==\"PUT\"\r\n    | extend Succeeded=toint(isempty(Exception) and isempty(ErrorDetails) and (ResultType==0 or ResultType==1))\r\n    | extend Failed=toint(1-Succeeded)\r\n    | extend DurationInMin=coalesce(DurationInMs/60000,E2EDurationInMilliseconds/60000,0)\r\n    | project Succeeded,Failed,DurationInMin\r\n)\r\n| summarize avg(Succeeded), sum(Succeeded), sum(Failed)"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - VM Creation Success Rate"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - VM Create Success and Performance Timeline",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "538987e7-a015-48f0-9c27-c3843b3738e8",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet view=datatable(OccurrenceTime:datetime,Succeeded:long,Failed:long)[];\r\nlet startTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize min(OccurrenceTime));\r\nlet endTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize max(OccurrenceTime));\r\nlet binval = 1h;\r\nlet zeroTimeTable =  (range Succeeded from 0 to 0 step 1\r\n    | mvexpand OccurrenceTime = range(startTime-binval, endTime+binval, binval) to typeof(datetime) limit 65536\r\n    | extend OccurrenceTime = bin(OccurrenceTime, binval));\r\nunion isfuzzy=true view,zeroTimeTable,(\r\n    database('db').['ETL-CrpServiceEventSource.ApiQosEvent']\r\n    | where OperationName startswith \"VirtualMachines.\" and not(OperationName endswith \"GET\")\r\n    | distinct OccurrenceTime,OperationName,ResultType,CorrelationId,E2EDurationInMilliseconds,ResourceName,ErrorDetails\r\n    | extend extracted=extractall(@\"(?:VirtualMachines\\.)(\\w*)(?:\\.)(DELETE|PUT|POST)\", OperationName)\r\n    | extend Method=tostring(extracted[0][1]), OpType=tostring(extracted[0][0])\r\n    | project-away extracted\r\n    | join kind=leftouter (\r\n        database('db').['ETL-Microsoft-AzureStack-Compute-Pipeline.VmPipelineRunStop']\r\n        | distinct OccurrenceTime,VmName,CorrelationId,DurationInMs,Exception\r\n        | summarize DurationInMs=sum(DurationInMs),Exception=any(Exception) by VmName,CorrelationId)\r\n    on CorrelationId,$left.ResourceName == $right.VmName\r\n    | where Method==\"PUT\"\r\n    | extend Succeeded=toint(isempty(Exception) and isempty(ErrorDetails) and (ResultType==0 or ResultType==1))\r\n    | extend Failed=toint(1-Succeeded)\r\n    | summarize Succeeded=countif(Succeeded==1),Failed=countif(Failed==1) by bin(OccurrenceTime,binval)\r\n)\r\n| summarize sum(Succeeded), sum(Failed) by bin(OccurrenceTime, time(1h)) | sort by OccurrenceTime asc"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - VM Create Success and Performance Timeline"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - VM Creation Failures By Hit Count",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "e06b39fa-a01e-4a0e-a94b-7aa634d9b1c5",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet schema=datatable(ResultCode:string,count_:long)[];\r\nunion isfuzzy=true schema,(\r\n    database('db').['ETL-CrpServiceEventSource.ApiQosEvent']\r\n    | where OperationName startswith \"VirtualMachines.\" and not(OperationName endswith \"GET\")\r\n    | distinct OccurrenceTime,OperationName,ResourceName,ResultType,DurationInMilliseconds,ResultCode,CorrelationId,ErrorDetails\r\n    | where notempty(ResultCode)\r\n    | summarize OccurrenceTime=max(OccurrenceTime),VmName=any(ResourceName),ResultType=any(ResultType),FirstToLastInMs=tolong((max(OccurrenceTime)-min(OccurrenceTime))/1ms),ErrorDetails=any(ErrorDetails) by CorrelationId,ResultCode\r\n    | join kind=leftouter (\r\n        database('db').['ETL-Microsoft-AzureStack-Compute-Pipeline.VmPipelineRunStop']\r\n        | distinct OccurrenceTime,VmName,CorrelationId,DurationInMs,Exception\r\n        | summarize DurationInMs=sum(DurationInMs),Exception=any(Exception) by VmName,CorrelationId)\r\n    on CorrelationId,VmName\r\n    | extend Duration=iff(DurationInMs>FirstToLastInMs,DurationInMs,FirstToLastInMs), isSuccess=(isempty(Exception) and isempty(ErrorDetails) and (ResultType==0 or ResultType==1))\r\n    | where not(isSuccess)\r\n    | where notempty(ResultCode)\r\n    | extend Example=pack(\"Exception\",Exception, \"ErrorDetails\", ErrorDetails, \"CorrelationId\", CorrelationId, \"OccurrenceTime\", OccurrenceTime)\r\n    | summarize count(),Example=any(tostring(Example)) by ResultCode\r\n    | order by count_ desc\r\n    | project ResultCode,count_,Example=toobject(Example)\r\n    | project ResultCode,count_,ExampleCorrelationId=Example.CorrelationId,ExampleException=Example.Exception,ExampleOccurrenceTime=Example.OccurrenceTime,ExampleErrorDetails=Example.ErrorDetails,Cluster='masvaas', Database='TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33'\r\n)"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - VM Creation Failures By Hit Count"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - Storage Data Path Success Rate",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "65ffd576-7126-4ba0-a709-9f8c3dea08d7",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nalias database db =cluster('{cluster}').database('{database}');\r\nlet view=datatable(ServiceType:string,Availability:real) [];\r\nlet invalidStatus = dynamic([\"ServerTimeoutError\",\"AnonymousServerTimeoutError\",\"SASServerTimeoutError\",\"ServerOtherError\",\"UnknownError\",\"AnonymousServerOtherError\",\"SASServerOtherError\"]);\r\nlet isFailedRequest = (requestStatus: string){requestStatus in (invalidStatus)};\r\nunion isfuzzy=true view,(\r\n    database('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTPROCESSED']\r\n    | where ServiceType != \"\" \r\n    | extend isFailed = isFailedRequest(RequestStatus)\r\n    | summarize success = countif(isFailed == 0),total = countif(RequestStatus != \"UnknownError\") by ServiceType\r\n    | extend Availability = iif(success==0, 1.0, 1.0 * success /total)\r\n)\r\n| summarize avg(Availability) by tostring(ServiceType)"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - Storage Data Path Success Rate"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - Storage Data Path Timeline",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "50088c8d-e34d-461a-90e5-b349cdd6d55a",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set truncationmaxrecords=20000;\r\nalias database db = cluster('{cluster}').database('{database}');\r\nlet view=datatable(ServiceType:string,OccurrenceTime:datetime,Availability:real) [];\r\nlet invalidStatus = dynamic([\"ServerTimeoutError\",\"AnonymousServerTimeoutError\",\"SASServerTimeoutError\",\"ServerOtherError\",\"UnknownError\",\"AnonymousServerOtherError\",\"SASServerOtherError\"]);\r\nlet isFailedRequest = (requestStatus: string){requestStatus in (invalidStatus)};\r\nlet startTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize min(OccurrenceTime));\r\nlet endTime = toscalar(union isfuzzy=true view,database(\"db\").['ETL-Microsoft-VaaS-FaultEngine*'] | summarize max(OccurrenceTime));\r\nlet binval = 10m;\r\nlet overlapVal = 1h;\r\nlet zeroTimeTable =  (range Availability from 1 to 1 step 1\r\n    | mvexpand OccurrenceTime = range(startTime-overlapVal, endTime+overlapVal, overlapVal) to typeof(datetime) limit 65536\r\n    | extend OccurrenceTime = bin(OccurrenceTime, binval),ServiceType=\"Timeline\",Availability=toreal(Availability));\r\nlet data=(\r\n    database('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTPROCESSED']\r\n    | where ServiceType != \"\" \r\n    | extend isFailed = isFailedRequest(RequestStatus)\r\n    | summarize success = countif(isFailed == 0),total = countif(RequestStatus != \"UnknownError\") by ServiceType, OccurrenceTime=bin(OccurrenceTime, 1m)\r\n    | extend Availability = iif(success==0, 1.0, 1.0 * success /total)\r\n);\r\nunion isfuzzy=true view,zeroTimeTable,data\r\n| sort by OccurrenceTime asc\r\n| project Availability,OccurrenceTime,ServiceType | sort by OccurrenceTime asc"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - Storage Data Path Timeline"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      },
      {
        "activityDisplayName": "FAULTSWAT - Storage Data Path Errors",
        "activityType": "DataMovement",
        "parameters": [
          {
            "name": "cluster",
            "value": "masvaas"
          },
          {
            "name": "database",
            "value": "TenantAvailabilityPNU-TestPass-MAS_Prod_1.1908.4.32-20190917181045-5454420b-2e38-4b9e-8b56-1712d321cf33"
          }
        ],
        "id": "4659a610-599b-444c-a122-75221fc0c387",
        "transformEngine": "Kusto",
        "input": {
          "type": "KustoQuery",
          "connectionName": "8861b1ad-ae21-41e1-b742-f59ee4c1ad43",
          "query": "set query_take_max_records=5000;\r\nlet view=datatable(OccurrenceTime:datetime,HttpStatusCode:string,RequestStatus:string,OperationType:string,ServiceType:string,ClientRequestId:string,ETL:string,CosmosLogs:string,Database:string,Cluster:string)[];\r\nalias database db = cluster('{cluster}').database('database');\r\nlet invalidStatus = dynamic([\"ServerTimeoutError\",\"AnonymousServerTimeoutError\",\"SASServerTimeoutError\",\"ServerOtherError\",\"UnknownError\",\"AnonymousServerOtherError\",\"SASServerOtherError\"]);\r\nlet insideSLAStatus = dynamic([\"Success\",\"SASSuccess\"]);\r\nlet outsideSLAStatus = dynamic([\"SuccessOutsideSLA\",\"SASSuccessOutsideSLA\"]);\r\nlet isFailedRequest = (requestStatus: string){requestStatus in (invalidStatus)};\r\nunion isfuzzy=true view,(\r\ndatabase('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTPROCESSED']\r\n    | where isFailedRequest(RequestStatus)\r\n    | distinct OccurrenceTime,ActivityID,HttpStatusCode,RequestStatus,OperationType,ServiceType\r\n    | join kind=leftouter (\r\n        database('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTACCEPT']\r\n        | distinct ActivityID,ClientRequestId)\r\n        on ActivityID\r\n    | project OccurrenceTime, ClientRequestId,ActivityID,ETL=\"Search\",CosmosLogs=\"Search\",HttpStatusCode,RequestStatus,OperationType,ServiceType\r\n    | order by OccurrenceTime asc\r\n    | extend Cluster='{cluster}', Database='{database}'\r\n)\r\nset query_take_max_records=5000;\r\nlet view=datatable(OccurrenceTime:datetime,HttpStatusCode:string,RequestStatus:string,OperationType:string,ServiceType:string,ClientRequestId:string,ETL:string,CosmosLogs:string,Database:string,Cluster:string)[];\r\nalias database db = cluster('{cluster}').database('database');\r\nlet invalidStatus = dynamic([\"ServerTimeoutError\",\"AnonymousServerTimeoutError\",\"SASServerTimeoutError\",\"ServerOtherError\",\"UnknownError\",\"AnonymousServerOtherError\",\"SASServerOtherError\"]);\r\nlet insideSLAStatus = dynamic([\"Success\",\"SASSuccess\"]);\r\nlet outsideSLAStatus = dynamic([\"SuccessOutsideSLA\",\"SASSuccessOutsideSLA\"]);\r\nlet isFailedRequest = (requestStatus: string){requestStatus in (invalidStatus)};\r\nunion isfuzzy=true view,(\r\ndatabase('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTPROCESSED']\r\n    | where isFailedRequest(RequestStatus)\r\n    | distinct OccurrenceTime,ActivityID,HttpStatusCode,RequestStatus,OperationType,ServiceType\r\n    | join kind=leftouter (\r\n        database('db').['ETL-Microsoft-AzureStack-StorageService.RESTREQUESTACCEPT']\r\n        | distinct ActivityID,ClientRequestId)\r\n        on ActivityID\r\n    | project OccurrenceTime, ClientRequestId,ActivityID,ETL=\"Search\",CosmosLogs=\"Search\",HttpStatusCode,RequestStatus,OperationType,ServiceType\r\n    | order by OccurrenceTime asc\r\n    | extend Cluster='{cluster}', Database='{database}'\r\n)\r\n"
        },
        "output": {
          "type": "KustoTable",
          "tableType": "Snapshot",
          "connectionName": "40373140-e4e5-4527-a01e-563718ea4599",
          "table": "FAULTSWAT - Storage Data Path Errors"
        },
        "validationQuery": "",
        "maxReprocessingAge": null
      }
    ],
    "project": "lens-9f42ae2a-5f93-4238-9c42-24f6d050b342",
    "context": {
      "uiCron": {
        "freq": "day",
        "rate": 1,
        "value": "0 49 18 */1 * *",
        "isEntered": false,
        "hourMins": 38,
        "minuteSecs": 35,
        "time": "2019-10-04T01:49:22.621Z",
        "weekDays": [
          true,
          false,
          false,
          false,
          false,
          false,
          false
        ],
        "monthDay": 1
      },
      "lensScenario": null,
      "lensCreatedBy": "v-vasub",
      "lensCreatedDate": "2019-10-03T18:54:48.3233767Z",
      "lensModifiedBy": "v-vasub",
      "lensModifiedDate": "2019-10-03T19:29:19.6527014Z"
    },
    "failureWebhook": {
      "url": "https://lens.msftcloudes.com/share/jobnotificationemail",
      "aadResource": "aa0c39bf-5086-4900-bf89-6404bff62cf8",
      "aadTenant": "microsoft.onmicrosoft.com"
    }
  },
  "createdBy": "v-vasub",
  "createdDate": "2019-10-03T18:54:48.3233767Z",
  "nextExecutionDate": "2019-10-04T18:49:00Z",
  "modifiedBy": "v-vasub",
  "modifiedDate": "2019-10-03T19:29:19.6527014Z",
  "version": "11",
  "isEnabled": true,
  "isQuarantined": false,
  "instances": [],
  "shareType": "shared",
  "eTag": ""
}